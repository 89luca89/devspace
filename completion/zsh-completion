#compdef _devspace devspace


function _devspace {
  local -a commands

  _arguments -C \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "add:Convenience command: adds something to devspace.yaml"
      "analyze:Analyzes a kubernetes namespace and checks for potential problems"
      "attach:Attaches to a container"
      "build:Builds all defined images and pushes them"
      "cleanup:Cleans up resources"
      "connect:Connect an external cluster to devspace cloud"
      "create:Create spaces in the cloud"
      "deploy:Deploy the project"
      "dev:Starts the development mode"
      "enter:Open a shell to a container"
      "init:Initializes DevSpace in the current folder"
      "list:Lists configuration"
      "login:Log into DevSpace Cloud"
      "logs:Prints the logs of a pod and attaches to it"
      "open:Opens the space in the browser"
      "print:Print displays the configuration"
      "purge:Delete deployed resources"
      "remove:Changes devspace configuration"
      "render:Render builds all defined images and shows the yamls that would be deployed"
      "reset:Resets an cluster token"
      "run:Run executes a predefined command"
      "set:Make global configuration changes"
      "status:Show the current status"
      "sync:Starts a bi-directional sync between the target container and the local path"
      "ui:Opens the localhost UI in the browser"
      "update:Updates the current config"
      "upgrade:Upgrade the DevSpace CLI to the newest version"
      "use:Use specific config"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  add)
    _devspace_add
    ;;
  analyze)
    _devspace_analyze
    ;;
  attach)
    _devspace_attach
    ;;
  build)
    _devspace_build
    ;;
  cleanup)
    _devspace_cleanup
    ;;
  connect)
    _devspace_connect
    ;;
  create)
    _devspace_create
    ;;
  deploy)
    _devspace_deploy
    ;;
  dev)
    _devspace_dev
    ;;
  enter)
    _devspace_enter
    ;;
  init)
    _devspace_init
    ;;
  list)
    _devspace_list
    ;;
  login)
    _devspace_login
    ;;
  logs)
    _devspace_logs
    ;;
  open)
    _devspace_open
    ;;
  print)
    _devspace_print
    ;;
  purge)
    _devspace_purge
    ;;
  remove)
    _devspace_remove
    ;;
  render)
    _devspace_render
    ;;
  reset)
    _devspace_reset
    ;;
  run)
    _devspace_run
    ;;
  set)
    _devspace_set
    ;;
  status)
    _devspace_status
    ;;
  sync)
    _devspace_sync
    ;;
  ui)
    _devspace_ui
    ;;
  update)
    _devspace_update
    ;;
  upgrade)
    _devspace_upgrade
    ;;
  use)
    _devspace_use
    ;;
  esac
}


function _devspace_add {
  local -a commands

  _arguments -C \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "deployment:Adds a deployment to devspace.yaml"
      "image:Add an image"
      "port:Add a new port forward configuration"
      "provider:Adds a new cloud provider to the configuration"
      "sync:Add a sync path"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  deployment)
    _devspace_add_deployment
    ;;
  image)
    _devspace_add_image
    ;;
  port)
    _devspace_add_port
    ;;
  provider)
    _devspace_add_provider
    ;;
  sync)
    _devspace_add_sync
    ;;
  esac
}

function _devspace_add_deployment {
  _arguments \
    '--chart[A helm chart to deploy (e.g. ./chart or stable/mysql)]:' \
    '--chart-repo[The helm chart repository url to use]:' \
    '--chart-version[The helm chart version to use]:' \
    '--component[A predefined component to use (run `devspace list available-components` to see all available components)]:' \
    '--context[]:' \
    '--dockerfile[A dockerfile]:' \
    '--image[A docker image to deploy (e.g. dscr.io/myuser/myrepo or dockeruser/repo:0.1 or mysql:latest)]:' \
    '--manifests[The kubernetes manifests to deploy (glob pattern are allowed, comma separated, e.g. manifests/** or kube/pod.yaml)]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_add_image {
  _arguments \
    '--buildtool[Specify which engine should build the file. Should match this regex: docker|kaniko]:' \
    '--context[The path of the images'\'' context]:' \
    '--dockerfile[The path of the images'\'' dockerfile]:' \
    '--image[The image name of the image (e.g. myusername/devspace)]:' \
    '--tag[The tag of the image]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_add_port {
  _arguments \
    '--label-selector[Comma separated key=value label-selector list (e.g. release=test)]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_add_provider {
  _arguments \
    '--host[The URL DevSpace should use for this provider]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_add_sync {
  _arguments \
    '--container[Absolute container path]:' \
    '--exclude[Comma separated list of paths to exclude (e.g. node_modules/,bin,*.exe)]:' \
    '--label-selector[Comma separated key=value selector list (e.g. release=test)]:' \
    '--local[Relative local path]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_analyze {
  _arguments \
    '--patient[If true, analyze will ignore failing pods and events until every deployment, statefulset, replicaset and pods are ready or the timeout is reached]' \
    '--timeout[Timeout until analyze should stop waiting]:' \
    '--wait[Wait for pods to get ready if they are just starting]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_attach {
  _arguments \
    '(-c --container)'{-c,--container}'[Container name within pod where to execute command]:' \
    '--image[Image is the config name of an image to select in the devspace config (e.g. '\''default'\''), it is NOT a docker image like myuser/myimage]:' \
    '(-l --label-selector)'{-l,--label-selector}'[Comma separated key=value selector list (e.g. release=test)]:' \
    '--pick[Select a pod]' \
    '--pod[Pod to open a shell to]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_build {
  _arguments \
    '--allow-cyclic[When enabled allows cyclic dependencies]' \
    '--build-sequential[Builds the images one after another instead of in parallel]' \
    '*--dependency[Builds only the specific named dependencies]:' \
    '(-b --force-build)'{-b,--force-build}'[Forces to build every image]' \
    '--force-dependencies[Forces to re-evaluate dependencies (use with --force-build --force-deploy to actually force building & deployment of dependencies)]' \
    '--skip-push[Skips image pushing, useful for minikube deployment]' \
    '(*-t *--tag)'{\*-t,\*--tag}'[Use the given tag for all built images]:' \
    '--verbose-dependencies[Builds the dependencies verbosely]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}


function _devspace_cleanup {
  local -a commands

  _arguments -C \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "images:Deletes all locally created images from docker"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  images)
    _devspace_cleanup_images
    ;;
  esac
}

function _devspace_cleanup_images {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}


function _devspace_connect {
  local -a commands

  _arguments -C \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "cluster:Connects an existing cluster to DevSpace Cloud"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  cluster)
    _devspace_connect_cluster
    ;;
  esac
}

function _devspace_connect_cluster {
  _arguments \
    '--admission-controller[Deploy the admission controller]' \
    '--cert-manager[Deploy a cert manager]' \
    '--context[The kube context to use]:' \
    '--domain[The domain to use]:' \
    '--gatekeeper[Deploy the gatekeeper]' \
    '--gatekeeper-rules[Deploy the gatekeeper default rules]' \
    '--ingress-controller[Deploy an ingress controller]' \
    '--key[The encryption key to use]:' \
    '--name[The cluster name to create]:' \
    '--open-ui[Opens the UI and displays the cluster overview]' \
    '--provider[The cloud provider to use]:' \
    '--public[Connects a new public cluster]' \
    '--use-domain[Use an automatic domain for the cluster]' \
    '--use-hostnetwork[Use the host network for the ingress controller instead of a loadbalancer]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}


function _devspace_create {
  local -a commands

  _arguments -C \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "space:Create a new cloud space"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  space)
    _devspace_create_space
    ;;
  esac
}

function _devspace_create_space {
  _arguments \
    '--active[Use the new Space as active Space for the current project]' \
    '--cluster[The cluster to create a space in]:' \
    '--provider[The cloud provider to use]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_deploy {
  _arguments \
    '--allow-cyclic[When enabled allows cyclic dependencies]' \
    '--build-sequential[Builds the images one after another instead of in parallel]' \
    '*--dependency[Deploys only the specific named dependencies]:' \
    '--deployments[Only deploy a specifc deployment (You can specify multiple deployments comma-separated]:' \
    '(-b --force-build)'{-b,--force-build}'[Forces to (re-)build every image]' \
    '--force-dependencies[Forces to re-evaluate dependencies (use with --force-build --force-deploy to actually force building & deployment of dependencies)]' \
    '(-d --force-deploy)'{-d,--force-deploy}'[Forces to (re-)deploy every deployment]' \
    '--skip-build[Skips building of images]' \
    '--skip-push[Skips image pushing, useful for minikube deployment]' \
    '--timeout[Timeout until deploy should stop waiting]:' \
    '--verbose-dependencies[Deploys the dependencies verbosely]' \
    '--wait[If true will wait for pods to be running or fails after given timeout]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_dev {
  _arguments \
    '--allow-cyclic[When enabled allows cyclic dependencies]' \
    '--build-sequential[Builds the images one after another instead of in parallel]' \
    '--deployments[Only deploy a specifc deployment (You can specify multiple deployments comma-separated]:' \
    '--exit-after-deploy[Exits the command after building the images and deploying the project]' \
    '(-b --force-build)'{-b,--force-build}'[Forces to build every image]' \
    '--force-dependencies[Forces to re-evaluate dependencies (use with --force-build --force-deploy to actually force building & deployment of dependencies)]' \
    '(-d --force-deploy)'{-d,--force-deploy}'[Forces to deploy every deployment]' \
    '(-i --interactive)'{-i,--interactive}'[Enable interactive mode for images (overrides entrypoint with sleep command) and start terminal proxy]' \
    '--open[Open defined URLs in the browser, if defined]' \
    '--portforwarding[Enable port forwarding]' \
    '--skip-build[Skips building of images]' \
    '(-x --skip-pipeline)'{-x,--skip-pipeline}'[Skips build & deployment and only starts sync, portforwarding & terminal]' \
    '--skip-push[Skips image pushing, useful for minikube deployment]' \
    '--sync[Enable code synchronization]' \
    '(-t --terminal)'{-t,--terminal}'[Open a terminal instead of showing logs]' \
    '--timeout[Timeout until dev should stop waiting and fail]:' \
    '--ui[Start the ui server]' \
    '--verbose-dependencies[Deploys the dependencies verbosely]' \
    '--verbose-sync[When enabled the sync will log every file change]' \
    '--wait[If true will wait first for pods to be running or fails after given timeout]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_enter {
  _arguments \
    '(-c --container)'{-c,--container}'[Container name within pod where to execute command]:' \
    '--image[Image is the config name of an image to select in the devspace config (e.g. '\''default'\''), it is NOT a docker image like myuser/myimage]:' \
    '(-l --label-selector)'{-l,--label-selector}'[Comma separated key=value selector list (e.g. release=test)]:' \
    '--pick[Select a pod]' \
    '--pod[Pod to open a shell to]:' \
    '--wait[Wait for the pod(s) to start if they are not running]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_init {
  _arguments \
    '--context[Context path to use for intialization]:' \
    '--dockerfile[Dockerfile to use for initialization]:' \
    '--provider[The cloud provider to use]:' \
    '(-r --reconfigure)'{-r,--reconfigure}'[Change existing configuration]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}


function _devspace_list {
  local -a commands

  _arguments -C \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "clusters:Lists all connected clusters"
      "commands:Lists all custom DevSpace commands"
      "contexts:Lists all kube contexts"
      "deployments:Lists and shows the status of all deployments"
      "namespaces:Lists all namespaces in the current context"
      "ports:Lists port forwarding configurations"
      "profiles:Lists all DevSpace profiles"
      "providers:Lists all providers"
      "spaces:Lists all user spaces"
      "sync:Lists sync configuration"
      "vars:Lists the vars in the active config"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  clusters)
    _devspace_list_clusters
    ;;
  commands)
    _devspace_list_commands
    ;;
  contexts)
    _devspace_list_contexts
    ;;
  deployments)
    _devspace_list_deployments
    ;;
  namespaces)
    _devspace_list_namespaces
    ;;
  ports)
    _devspace_list_ports
    ;;
  profiles)
    _devspace_list_profiles
    ;;
  providers)
    _devspace_list_providers
    ;;
  spaces)
    _devspace_list_spaces
    ;;
  sync)
    _devspace_list_sync
    ;;
  vars)
    _devspace_list_vars
    ;;
  esac
}

function _devspace_list_clusters {
  _arguments \
    '--all[Show all available clusters including hosted DevSpace cloud clusters]' \
    '--provider[Cloud Provider to use]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_list_commands {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_list_contexts {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_list_deployments {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_list_namespaces {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_list_ports {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_list_profiles {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_list_providers {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_list_spaces {
  _arguments \
    '--all[List all spaces the user has access to in all clusters (not only created by the user)]' \
    '--cluster[List all spaces in a certain cluster]:' \
    '--name[Space name to show (default: all)]:' \
    '--provider[Cloud Provider to use]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_list_sync {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_list_vars {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_login {
  _arguments \
    '--key[Access key to use]:' \
    '--provider[Provider to use]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_logs {
  _arguments \
    '(-c --container)'{-c,--container}'[Container name within pod where to execute command]:' \
    '(-f --follow)'{-f,--follow}'[Attach to logs afterwards]' \
    '--image[Image is the config name of an image to select in the devspace config (e.g. '\''default'\''), it is NOT a docker image like myuser/myimage]:' \
    '(-l --label-selector)'{-l,--label-selector}'[Comma separated key=value selector list (e.g. release=test)]:' \
    '--lines[Max amount of lines to print from the last log]:' \
    '--pick[Select a pod]' \
    '--pod[Pod to print the logs of]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_open {
  _arguments \
    '--provider[The cloud provider to use]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_print {
  _arguments \
    '--skip-info[When enabled, only prints the configuration without additional information]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_purge {
  _arguments \
    '--allow-cyclic[When enabled allows cyclic dependencies]' \
    '--dependencies[When enabled purges the dependencies as well]' \
    '*--dependency[Purges only the specific named dependencies]:' \
    '(-d --deployments)'{-d,--deployments}'[The deployment to delete (You can specify multiple deployments comma-separated, e.g. devspace-default,devspace-database etc.)]:' \
    '--verbose-dependencies[Builds the dependencies verbosely]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}


function _devspace_remove {
  local -a commands

  _arguments -C \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "cluster:Removes a connected cluster"
      "context:Removes a kubectl-context"
      "deployment:Removes one or all deployments from devspace configuration"
      "image:Removes one or all images from the devspace"
      "port:Removes forwarded ports from a devspace"
      "provider:Removes a cloud provider from the configuration"
      "space:Removes a cloud space"
      "sync:Remove sync paths from the devspace"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  cluster)
    _devspace_remove_cluster
    ;;
  context)
    _devspace_remove_context
    ;;
  deployment)
    _devspace_remove_deployment
    ;;
  image)
    _devspace_remove_image
    ;;
  port)
    _devspace_remove_port
    ;;
  provider)
    _devspace_remove_provider
    ;;
  space)
    _devspace_remove_space
    ;;
  sync)
    _devspace_remove_sync
    ;;
  esac
}

function _devspace_remove_cluster {
  _arguments \
    '--provider[The cloud provider to use]:' \
    '(-y --yes)'{-y,--yes}'[Ignores all questions and deletes the cluster with all services and spaces]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_remove_context {
  _arguments \
    '--all-spaces[Remove all kubectl contexts belonging to Spaces]' \
    '--provider[The cloud provider to use]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_remove_deployment {
  _arguments \
    '--all[Remove all deployments]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_remove_image {
  _arguments \
    '--all[Remove all images]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_remove_port {
  _arguments \
    '--all[Remove all configured ports]' \
    '--label-selector[Comma separated key=value selector list (e.g. release=test)]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_remove_provider {
  _arguments \
    '--name[Cloud provider name to use]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_remove_space {
  _arguments \
    '--all[Delete all spaces]' \
    '--id[SpaceID id to use]:' \
    '--provider[Cloud Provider to use]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_remove_sync {
  _arguments \
    '--all[Remove all configured sync paths]' \
    '--container[Absolute container path to remove]:' \
    '--label-selector[Comma separated key=value selector list (e.g. release=test)]:' \
    '--local[Relative local path to remove]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_render {
  _arguments \
    '--allow-cyclic[When enabled allows cyclic dependencies]' \
    '--build-sequential[Builds the images one after another instead of in parallel]' \
    '*--dependency[Renders only the specific named dependencies]:' \
    '--deployments[Only deploy a specifc deployment (You can specify multiple deployments comma-separated]:' \
    '(-b --force-build)'{-b,--force-build}'[Forces to build every image]' \
    '--show-logs[Shows the build logs]' \
    '--skip-build[Skips image building]' \
    '--skip-dependencies[Skips rendering the dependencies]' \
    '--skip-push[Skips image pushing, useful for minikube deployment]' \
    '(*-t *--tag)'{\*-t,\*--tag}'[Use the given tag for all built images]:' \
    '--verbose-dependencies[Builds the dependencies verbosely]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}


function _devspace_reset {
  local -a commands

  _arguments -C \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "dependencies:Resets the dependencies cache"
      "key:Resets a cluster key"
      "vars:Resets the current config vars"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  dependencies)
    _devspace_reset_dependencies
    ;;
  key)
    _devspace_reset_key
    ;;
  vars)
    _devspace_reset_vars
    ;;
  esac
}

function _devspace_reset_dependencies {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_reset_key {
  _arguments \
    '--provider[The cloud provider to use]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_reset_vars {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_run {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}


function _devspace_set {
  local -a commands

  _arguments -C \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "analytics:Update analytics settings"
      "encryptionkey:Sets the encryption"
      "var:Sets a variable"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  analytics)
    _devspace_set_analytics
    ;;
  encryptionkey)
    _devspace_set_encryptionkey
    ;;
  var)
    _devspace_set_var
    ;;
  esac
}

function _devspace_set_analytics {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_set_encryptionkey {
  _arguments \
    '--cluster[The cluster to apply this key for]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_set_var {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}


function _devspace_status {
  local -a commands

  _arguments -C \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "sync:Shows the sync status"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  sync)
    _devspace_status_sync
    ;;
  esac
}

function _devspace_status_sync {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_sync {
  _arguments \
    '(-c --container)'{-c,--container}'[Container name within pod where to execute command]:' \
    '--container-path[Container path to use (Default is working directory)]:' \
    '--download-on-initial-sync[DEPRECATED: Downloads all locally non existing remote files in the beginning]' \
    '--download-only[If set DevSpace will only download files]' \
    '(*-e *--exclude)'{\*-e,\*--exclude}'[Exclude directory from sync]:' \
    '--initial-sync[The initial sync strategy to use (mirrorLocal, mirrorRemote, preferLocal, preferRemote, preferNewest, keepAll)]:' \
    '(-l --label-selector)'{-l,--label-selector}'[Comma separated key=value selector list (e.g. release=test)]:' \
    '--local-path[Local path to use (Default is current directory]:' \
    '--no-watch[Synchronizes local and remote and then stops]' \
    '--pick[Select a pod]' \
    '--pod[Pod to open a shell to]:' \
    '--upload-only[If set DevSpace will only upload files]' \
    '--verbose[Shows every file that is synced]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_ui {
  _arguments \
    '--dev[Ignore errors when downloading UI]' \
    '--port[The port to use when opening the server]:' \
    '--server[If enabled will force start a server (otherwise an existing UI server is searched)]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}


function _devspace_update {
  local -a commands

  _arguments -C \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "config:Converts the active config to the current config version"
      "dependencies:Updates the git repositories of the dependencies defined in the devspace.yaml"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  config)
    _devspace_update_config
    ;;
  dependencies)
    _devspace_update_dependencies
    ;;
  esac
}

function _devspace_update_config {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_update_dependencies {
  _arguments \
    '--allow-cyclic[When enabled allows cyclic dependencies]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_upgrade {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}


function _devspace_use {
  local -a commands

  _arguments -C \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:' \
    "1: :->cmnds" \
    "*::arg:->args"

  case $state in
  cmnds)
    commands=(
      "context:Tells DevSpace which kube context to use"
      "namespace:Tells DevSpace which namespace to use"
      "profile:Use a specific DevSpace profile"
      "provider:Change the default provider"
      "space:Use an existing space for the current configuration"
    )
    _describe "command" commands
    ;;
  esac

  case "$words[1]" in
  context)
    _devspace_use_context
    ;;
  namespace)
    _devspace_use_namespace
    ;;
  profile)
    _devspace_use_profile
    ;;
  provider)
    _devspace_use_provider
    ;;
  space)
    _devspace_use_space
    ;;
  esac
}

function _devspace_use_context {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_use_namespace {
  _arguments \
    '--reset[Resets the default namespace of the current kube-context]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_use_profile {
  _arguments \
    '--reset[Don'\''t use a profile anymore]' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_use_provider {
  _arguments \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

function _devspace_use_space {
  _arguments \
    '--get-token[Prints the service token to the console]' \
    '--provider[The cloud provider to use]:' \
    '--space-id[The space id to use]:' \
    '--config[The devspace config file to use]:' \
    '--debug[Prints the stack trace if an error occurs]' \
    '--kube-context[The kubernetes context to use]:' \
    '(-n --namespace)'{-n,--namespace}'[The kubernetes namespace to use]:' \
    '--no-warn[If true does not show any warning when deploying into a different namespace or kube-context than before]' \
    '(-p --profile)'{-p,--profile}'[The devspace profile to use (if there is any)]:' \
    '--silent[Run in silent mode and prevents any devspace log output except panics & fatals]' \
    '(-s --switch-context)'{-s,--switch-context}'[Switches and uses the last kube context and namespace that was used to deploy the DevSpace project]' \
    '*--var[Variables to override during execution (e.g. --var=MYVAR=MYVALUE)]:'
}

