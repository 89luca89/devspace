// Code generated by protoc-gen-go. DO NOT EDIT.
// source: remote.proto

package remote

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type LogLevel int32

const (
	LogLevel_INFO    LogLevel = 0
	LogLevel_VERBOSE LogLevel = 1
	LogLevel_DEBUG   LogLevel = 2
	LogLevel_WARNING LogLevel = 3
	LogLevel_ERROR   LogLevel = 4
)

var LogLevel_name = map[int32]string{
	0: "INFO",
	1: "VERBOSE",
	2: "DEBUG",
	3: "WARNING",
	4: "ERROR",
}

var LogLevel_value = map[string]int32{
	"INFO":    0,
	"VERBOSE": 1,
	"DEBUG":   2,
	"WARNING": 3,
	"ERROR":   4,
}

func (x LogLevel) String() string {
	return proto.EnumName(LogLevel_name, int32(x))
}

func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{0}
}

type TunnelScheme int32

const (
	TunnelScheme_TCP TunnelScheme = 0
	TunnelScheme_UDP TunnelScheme = 1
)

var TunnelScheme_name = map[int32]string{
	0: "TCP",
	1: "UDP",
}

var TunnelScheme_value = map[string]int32{
	"TCP": 0,
	"UDP": 1,
}

func (x TunnelScheme) String() string {
	return proto.EnumName(TunnelScheme_name, int32(x))
}

func (TunnelScheme) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{1}
}

type ChangeType int32

const (
	ChangeType_CHANGE ChangeType = 0
	ChangeType_DELETE ChangeType = 1
)

var ChangeType_name = map[int32]string{
	0: "CHANGE",
	1: "DELETE",
}

var ChangeType_value = map[string]int32{
	"CHANGE": 0,
	"DELETE": 1,
}

func (x ChangeType) String() string {
	return proto.EnumName(ChangeType_name, int32(x))
}

func (ChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{2}
}

type LogMessage struct {
	LogLevel             LogLevel `protobuf:"varint,1,opt,name=logLevel,proto3,enum=remote.LogLevel" json:"logLevel,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogMessage) Reset()         { *m = LogMessage{} }
func (m *LogMessage) String() string { return proto.CompactTextString(m) }
func (*LogMessage) ProtoMessage()    {}
func (*LogMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{0}
}

func (m *LogMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogMessage.Unmarshal(m, b)
}
func (m *LogMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogMessage.Marshal(b, m, deterministic)
}
func (m *LogMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogMessage.Merge(m, src)
}
func (m *LogMessage) XXX_Size() int {
	return xxx_messageInfo_LogMessage.Size(m)
}
func (m *LogMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_LogMessage.DiscardUnknown(m)
}

var xxx_messageInfo_LogMessage proto.InternalMessageInfo

func (m *LogMessage) GetLogLevel() LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return LogLevel_INFO
}

func (m *LogMessage) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SocketDataRequest struct {
	Port                 int32        `protobuf:"varint,1,opt,name=port,proto3" json:"port,omitempty"`
	RequestId            string       `protobuf:"bytes,2,opt,name=requestId,proto3" json:"requestId,omitempty"`
	LogLevel             LogLevel     `protobuf:"varint,3,opt,name=logLevel,proto3,enum=remote.LogLevel" json:"logLevel,omitempty"`
	Scheme               TunnelScheme `protobuf:"varint,4,opt,name=scheme,proto3,enum=remote.TunnelScheme" json:"scheme,omitempty"`
	Data                 []byte       `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	ShouldClose          bool         `protobuf:"varint,6,opt,name=shouldClose,proto3" json:"shouldClose,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SocketDataRequest) Reset()         { *m = SocketDataRequest{} }
func (m *SocketDataRequest) String() string { return proto.CompactTextString(m) }
func (*SocketDataRequest) ProtoMessage()    {}
func (*SocketDataRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{1}
}

func (m *SocketDataRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SocketDataRequest.Unmarshal(m, b)
}
func (m *SocketDataRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SocketDataRequest.Marshal(b, m, deterministic)
}
func (m *SocketDataRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocketDataRequest.Merge(m, src)
}
func (m *SocketDataRequest) XXX_Size() int {
	return xxx_messageInfo_SocketDataRequest.Size(m)
}
func (m *SocketDataRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SocketDataRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SocketDataRequest proto.InternalMessageInfo

func (m *SocketDataRequest) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *SocketDataRequest) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *SocketDataRequest) GetLogLevel() LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return LogLevel_INFO
}

func (m *SocketDataRequest) GetScheme() TunnelScheme {
	if m != nil {
		return m.Scheme
	}
	return TunnelScheme_TCP
}

func (m *SocketDataRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SocketDataRequest) GetShouldClose() bool {
	if m != nil {
		return m.ShouldClose
	}
	return false
}

type SocketDataResponse struct {
	HasErr               bool        `protobuf:"varint,1,opt,name=hasErr,proto3" json:"hasErr,omitempty"`
	LogMessage           *LogMessage `protobuf:"bytes,2,opt,name=logMessage,proto3" json:"logMessage,omitempty"`
	RequestId            string      `protobuf:"bytes,3,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Data                 []byte      `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
	ShouldClose          bool        `protobuf:"varint,5,opt,name=shouldClose,proto3" json:"shouldClose,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SocketDataResponse) Reset()         { *m = SocketDataResponse{} }
func (m *SocketDataResponse) String() string { return proto.CompactTextString(m) }
func (*SocketDataResponse) ProtoMessage()    {}
func (*SocketDataResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{2}
}

func (m *SocketDataResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SocketDataResponse.Unmarshal(m, b)
}
func (m *SocketDataResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SocketDataResponse.Marshal(b, m, deterministic)
}
func (m *SocketDataResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SocketDataResponse.Merge(m, src)
}
func (m *SocketDataResponse) XXX_Size() int {
	return xxx_messageInfo_SocketDataResponse.Size(m)
}
func (m *SocketDataResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SocketDataResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SocketDataResponse proto.InternalMessageInfo

func (m *SocketDataResponse) GetHasErr() bool {
	if m != nil {
		return m.HasErr
	}
	return false
}

func (m *SocketDataResponse) GetLogMessage() *LogMessage {
	if m != nil {
		return m.LogMessage
	}
	return nil
}

func (m *SocketDataResponse) GetRequestId() string {
	if m != nil {
		return m.RequestId
	}
	return ""
}

func (m *SocketDataResponse) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *SocketDataResponse) GetShouldClose() bool {
	if m != nil {
		return m.ShouldClose
	}
	return false
}

type Command struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=Cmd,proto3" json:"Cmd,omitempty"`
	Args                 []string `protobuf:"bytes,2,rep,name=Args,proto3" json:"Args,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{3}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

func (m *Command) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type PathsChecksum struct {
	Checksums            []uint32 `protobuf:"varint,1,rep,packed,name=Checksums,proto3" json:"Checksums,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PathsChecksum) Reset()         { *m = PathsChecksum{} }
func (m *PathsChecksum) String() string { return proto.CompactTextString(m) }
func (*PathsChecksum) ProtoMessage()    {}
func (*PathsChecksum) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{4}
}

func (m *PathsChecksum) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PathsChecksum.Unmarshal(m, b)
}
func (m *PathsChecksum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PathsChecksum.Marshal(b, m, deterministic)
}
func (m *PathsChecksum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PathsChecksum.Merge(m, src)
}
func (m *PathsChecksum) XXX_Size() int {
	return xxx_messageInfo_PathsChecksum.Size(m)
}
func (m *PathsChecksum) XXX_DiscardUnknown() {
	xxx_messageInfo_PathsChecksum.DiscardUnknown(m)
}

var xxx_messageInfo_PathsChecksum proto.InternalMessageInfo

func (m *PathsChecksum) GetChecksums() []uint32 {
	if m != nil {
		return m.Checksums
	}
	return nil
}

type Watch struct {
	Path                 string   `protobuf:"bytes,1,opt,name=Path,proto3" json:"Path,omitempty"`
	Exclude              []string `protobuf:"bytes,2,rep,name=Exclude,proto3" json:"Exclude,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Watch) Reset()         { *m = Watch{} }
func (m *Watch) String() string { return proto.CompactTextString(m) }
func (*Watch) ProtoMessage()    {}
func (*Watch) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{5}
}

func (m *Watch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Watch.Unmarshal(m, b)
}
func (m *Watch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Watch.Marshal(b, m, deterministic)
}
func (m *Watch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Watch.Merge(m, src)
}
func (m *Watch) XXX_Size() int {
	return xxx_messageInfo_Watch.Size(m)
}
func (m *Watch) XXX_DiscardUnknown() {
	xxx_messageInfo_Watch.DiscardUnknown(m)
}

var xxx_messageInfo_Watch proto.InternalMessageInfo

func (m *Watch) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Watch) GetExclude() []string {
	if m != nil {
		return m.Exclude
	}
	return nil
}

type ChangeAmount struct {
	Amount               int64    `protobuf:"varint,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChangeAmount) Reset()         { *m = ChangeAmount{} }
func (m *ChangeAmount) String() string { return proto.CompactTextString(m) }
func (*ChangeAmount) ProtoMessage()    {}
func (*ChangeAmount) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{6}
}

func (m *ChangeAmount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeAmount.Unmarshal(m, b)
}
func (m *ChangeAmount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeAmount.Marshal(b, m, deterministic)
}
func (m *ChangeAmount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeAmount.Merge(m, src)
}
func (m *ChangeAmount) XXX_Size() int {
	return xxx_messageInfo_ChangeAmount.Size(m)
}
func (m *ChangeAmount) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeAmount.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeAmount proto.InternalMessageInfo

func (m *ChangeAmount) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type ChangeChunk struct {
	Changes              []*Change `protobuf:"bytes,1,rep,name=changes,proto3" json:"changes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *ChangeChunk) Reset()         { *m = ChangeChunk{} }
func (m *ChangeChunk) String() string { return proto.CompactTextString(m) }
func (*ChangeChunk) ProtoMessage()    {}
func (*ChangeChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{7}
}

func (m *ChangeChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChangeChunk.Unmarshal(m, b)
}
func (m *ChangeChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChangeChunk.Marshal(b, m, deterministic)
}
func (m *ChangeChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChangeChunk.Merge(m, src)
}
func (m *ChangeChunk) XXX_Size() int {
	return xxx_messageInfo_ChangeChunk.Size(m)
}
func (m *ChangeChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_ChangeChunk.DiscardUnknown(m)
}

var xxx_messageInfo_ChangeChunk proto.InternalMessageInfo

func (m *ChangeChunk) GetChanges() []*Change {
	if m != nil {
		return m.Changes
	}
	return nil
}

type Change struct {
	ChangeType           ChangeType `protobuf:"varint,1,opt,name=ChangeType,proto3,enum=remote.ChangeType" json:"ChangeType,omitempty"`
	Path                 string     `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	MtimeUnix            int64      `protobuf:"varint,3,opt,name=MtimeUnix,proto3" json:"MtimeUnix,omitempty"`
	MtimeUnixNano        int64      `protobuf:"varint,4,opt,name=MtimeUnixNano,proto3" json:"MtimeUnixNano,omitempty"`
	Size                 int64      `protobuf:"varint,5,opt,name=Size,proto3" json:"Size,omitempty"`
	IsDir                bool       `protobuf:"varint,6,opt,name=IsDir,proto3" json:"IsDir,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *Change) Reset()         { *m = Change{} }
func (m *Change) String() string { return proto.CompactTextString(m) }
func (*Change) ProtoMessage()    {}
func (*Change) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{8}
}

func (m *Change) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Change.Unmarshal(m, b)
}
func (m *Change) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Change.Marshal(b, m, deterministic)
}
func (m *Change) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Change.Merge(m, src)
}
func (m *Change) XXX_Size() int {
	return xxx_messageInfo_Change.Size(m)
}
func (m *Change) XXX_DiscardUnknown() {
	xxx_messageInfo_Change.DiscardUnknown(m)
}

var xxx_messageInfo_Change proto.InternalMessageInfo

func (m *Change) GetChangeType() ChangeType {
	if m != nil {
		return m.ChangeType
	}
	return ChangeType_CHANGE
}

func (m *Change) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Change) GetMtimeUnix() int64 {
	if m != nil {
		return m.MtimeUnix
	}
	return 0
}

func (m *Change) GetMtimeUnixNano() int64 {
	if m != nil {
		return m.MtimeUnixNano
	}
	return 0
}

func (m *Change) GetSize() int64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Change) GetIsDir() bool {
	if m != nil {
		return m.IsDir
	}
	return false
}

type Paths struct {
	Paths                []string `protobuf:"bytes,1,rep,name=Paths,proto3" json:"Paths,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Paths) Reset()         { *m = Paths{} }
func (m *Paths) String() string { return proto.CompactTextString(m) }
func (*Paths) ProtoMessage()    {}
func (*Paths) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{9}
}

func (m *Paths) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Paths.Unmarshal(m, b)
}
func (m *Paths) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Paths.Marshal(b, m, deterministic)
}
func (m *Paths) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Paths.Merge(m, src)
}
func (m *Paths) XXX_Size() int {
	return xxx_messageInfo_Paths.Size(m)
}
func (m *Paths) XXX_DiscardUnknown() {
	xxx_messageInfo_Paths.DiscardUnknown(m)
}

var xxx_messageInfo_Paths proto.InternalMessageInfo

func (m *Paths) GetPaths() []string {
	if m != nil {
		return m.Paths
	}
	return nil
}

type Chunk struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{10}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefc82927d57d89b, []int{11}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("remote.LogLevel", LogLevel_name, LogLevel_value)
	proto.RegisterEnum("remote.TunnelScheme", TunnelScheme_name, TunnelScheme_value)
	proto.RegisterEnum("remote.ChangeType", ChangeType_name, ChangeType_value)
	proto.RegisterType((*LogMessage)(nil), "remote.LogMessage")
	proto.RegisterType((*SocketDataRequest)(nil), "remote.SocketDataRequest")
	proto.RegisterType((*SocketDataResponse)(nil), "remote.SocketDataResponse")
	proto.RegisterType((*Command)(nil), "remote.Command")
	proto.RegisterType((*PathsChecksum)(nil), "remote.PathsChecksum")
	proto.RegisterType((*Watch)(nil), "remote.Watch")
	proto.RegisterType((*ChangeAmount)(nil), "remote.ChangeAmount")
	proto.RegisterType((*ChangeChunk)(nil), "remote.ChangeChunk")
	proto.RegisterType((*Change)(nil), "remote.Change")
	proto.RegisterType((*Paths)(nil), "remote.Paths")
	proto.RegisterType((*Chunk)(nil), "remote.Chunk")
	proto.RegisterType((*Empty)(nil), "remote.Empty")
}

func init() { proto.RegisterFile("remote.proto", fileDescriptor_eefc82927d57d89b) }

var fileDescriptor_eefc82927d57d89b = []byte{
	// 813 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x5f, 0x8f, 0xdb, 0x44,
	0x10, 0xcf, 0xc6, 0xb1, 0x93, 0x4c, 0x72, 0xc5, 0x2c, 0x07, 0x32, 0xa7, 0x22, 0x19, 0xab, 0xaa,
	0xac, 0xa3, 0x1c, 0x25, 0x55, 0xc5, 0xf3, 0xd5, 0x31, 0x47, 0xa4, 0x6b, 0xee, 0xb4, 0x97, 0xd0,
	0x67, 0x93, 0xac, 0xe2, 0xe8, 0x6c, 0x6f, 0xf0, 0xae, 0x4b, 0x0b, 0x5f, 0x86, 0x0f, 0xc1, 0x33,
	0x1f, 0x81, 0x57, 0xbe, 0x0e, 0xda, 0x3f, 0x4e, 0xec, 0x3b, 0xaa, 0xde, 0xdb, 0xfc, 0x66, 0x67,
	0x66, 0xe7, 0xf7, 0x9b, 0x59, 0x1b, 0xc6, 0x25, 0xcd, 0x99, 0xa0, 0x67, 0xbb, 0x92, 0x09, 0x86,
	0x1d, 0x8d, 0x82, 0x05, 0xc0, 0x25, 0xdb, 0xbc, 0xa6, 0x9c, 0x27, 0x1b, 0x8a, 0x9f, 0xc1, 0x20,
	0x63, 0x9b, 0x4b, 0xfa, 0x96, 0x66, 0x1e, 0xf2, 0x51, 0xf8, 0x68, 0xe2, 0x9e, 0x99, 0xb4, 0x4b,
	0xe3, 0x27, 0xfb, 0x08, 0xec, 0x41, 0x3f, 0xd7, 0x89, 0x5e, 0xd7, 0x47, 0xe1, 0x90, 0xd4, 0x30,
	0xf8, 0x17, 0xc1, 0xa7, 0x37, 0x6c, 0x75, 0x4b, 0xc5, 0x34, 0x11, 0x09, 0xa1, 0xbf, 0x56, 0x94,
	0x0b, 0x8c, 0xa1, 0xb7, 0x63, 0xa5, 0x50, 0x95, 0x6d, 0xa2, 0x6c, 0xfc, 0x18, 0x86, 0xa5, 0x3e,
	0x9e, 0xad, 0x4d, 0x95, 0x83, 0xa3, 0xd5, 0x8f, 0xf5, 0xd1, 0x7e, 0x9e, 0x81, 0xc3, 0x57, 0x29,
	0xcd, 0xa9, 0xd7, 0x53, 0xb1, 0xc7, 0x75, 0xec, 0xa2, 0x2a, 0x0a, 0x9a, 0xdd, 0xa8, 0x33, 0x62,
	0x62, 0x64, 0x37, 0xeb, 0x44, 0x24, 0x9e, 0xed, 0xa3, 0x70, 0x4c, 0x94, 0x8d, 0x7d, 0x18, 0xf1,
	0x94, 0x55, 0xd9, 0x3a, 0xca, 0x18, 0xa7, 0x9e, 0xe3, 0xa3, 0x70, 0x40, 0x9a, 0xae, 0xe0, 0x2f,
	0x04, 0xb8, 0xc9, 0x8c, 0xef, 0x58, 0xc1, 0x29, 0xfe, 0x02, 0x9c, 0x34, 0xe1, 0x71, 0x59, 0x2a,
	0x72, 0x03, 0x62, 0x10, 0x9e, 0x00, 0x64, 0x7b, 0x79, 0x15, 0xbf, 0xd1, 0x04, 0x37, 0x28, 0x98,
	0x13, 0xd2, 0x88, 0x6a, 0x4b, 0x62, 0xdd, 0x95, 0xa4, 0x6e, 0xbb, 0xf7, 0xe1, 0xb6, 0xed, 0xfb,
	0x6d, 0x7f, 0x07, 0xfd, 0x88, 0xe5, 0x79, 0x52, 0xac, 0xb1, 0x0b, 0x56, 0x94, 0xaf, 0x55, 0x9f,
	0x43, 0x22, 0x4d, 0x59, 0xf2, 0xbc, 0xdc, 0x70, 0xaf, 0xeb, 0x5b, 0xe1, 0x90, 0x28, 0x3b, 0xf8,
	0x16, 0x8e, 0xae, 0x13, 0x91, 0xf2, 0x28, 0xa5, 0xab, 0x5b, 0x5e, 0xe5, 0xb2, 0xab, 0xda, 0xe6,
	0x1e, 0xf2, 0xad, 0xf0, 0x88, 0x1c, 0x1c, 0xc1, 0x4b, 0xb0, 0xdf, 0x24, 0x62, 0x95, 0xca, 0x5a,
	0x32, 0xcf, 0x94, 0x57, 0xb6, 0xdc, 0x93, 0xf8, 0xdd, 0x2a, 0xab, 0xd6, 0xd4, 0x5c, 0x51, 0xc3,
	0xe0, 0x29, 0x8c, 0xa3, 0x34, 0x29, 0x36, 0xf4, 0x3c, 0x67, 0x55, 0x21, 0xa4, 0x8c, 0xda, 0x52,
	0xf9, 0x16, 0x31, 0x28, 0xf8, 0x01, 0x46, 0x3a, 0x2e, 0x4a, 0xab, 0xe2, 0x16, 0x87, 0xd0, 0x5f,
	0x29, 0xa8, 0x3b, 0x19, 0x4d, 0x1e, 0xd5, 0x92, 0xea, 0x28, 0x52, 0x1f, 0x07, 0x7f, 0x23, 0x70,
	0xb4, 0x4f, 0x8e, 0x42, 0x5b, 0x8b, 0xf7, 0x3b, 0x6a, 0xb6, 0x1b, 0xb7, 0xf3, 0xe4, 0x09, 0x69,
	0x44, 0xed, 0xd9, 0x74, 0x1b, 0x6c, 0x1e, 0xc3, 0xf0, 0xb5, 0xd8, 0xe6, 0x74, 0x59, 0x6c, 0xdf,
	0xa9, 0xf1, 0x58, 0xe4, 0xe0, 0xc0, 0x4f, 0xe0, 0x68, 0x0f, 0xe6, 0x49, 0xc1, 0xd4, 0x9c, 0x2c,
	0xd2, 0x76, 0xca, 0xba, 0x37, 0xdb, 0xdf, 0xf5, 0xa4, 0x2c, 0xa2, 0x6c, 0x7c, 0x0c, 0xf6, 0x8c,
	0x4f, 0xb7, 0xa5, 0xd9, 0x3a, 0x0d, 0x82, 0xaf, 0xc0, 0x56, 0x73, 0x90, 0xc7, 0xca, 0x50, 0x8c,
	0x87, 0x44, 0x83, 0xe0, 0x6b, 0xb0, 0xb5, 0x24, 0x9e, 0x1c, 0x70, 0x21, 0xa8, 0x91, 0x6e, 0x4c,
	0x6a, 0x18, 0xf4, 0xc1, 0x8e, 0xf3, 0x9d, 0x78, 0x7f, 0x3a, 0x85, 0x41, 0xfd, 0x68, 0xf0, 0x00,
	0x7a, 0xb3, 0xf9, 0x8f, 0x57, 0x6e, 0x07, 0x8f, 0xa0, 0xff, 0x73, 0x4c, 0x5e, 0x5d, 0xdd, 0xc4,
	0x2e, 0xc2, 0x43, 0xb0, 0xa7, 0xf1, 0xab, 0xe5, 0x85, 0xdb, 0x95, 0xfe, 0x37, 0xe7, 0x64, 0x3e,
	0x9b, 0x5f, 0xb8, 0x96, 0xf4, 0xc7, 0x84, 0x5c, 0x11, 0xb7, 0x77, 0xea, 0xc3, 0xb8, 0xf9, 0x9c,
	0x70, 0x1f, 0xac, 0x45, 0x74, 0xed, 0x76, 0xa4, 0xb1, 0x9c, 0x5e, 0xbb, 0xe8, 0xf4, 0x49, 0x53,
	0x68, 0x0c, 0xe0, 0x44, 0x3f, 0x9d, 0xcf, 0x2f, 0x62, 0xb7, 0x23, 0xed, 0x69, 0x7c, 0x19, 0x2f,
	0x62, 0x17, 0x4d, 0xfe, 0x00, 0x47, 0xd7, 0xc1, 0x33, 0x80, 0x59, 0xb1, 0x15, 0x06, 0x7d, 0x59,
	0x8f, 0xe4, 0xde, 0xf7, 0xe3, 0xe4, 0xe4, 0xff, 0x8e, 0xf4, 0x03, 0x0c, 0x3a, 0x21, 0x7a, 0x8e,
	0xf0, 0x53, 0xe8, 0x5d, 0x6f, 0x8b, 0x0d, 0x3e, 0xaa, 0x23, 0x15, 0xf3, 0x93, 0x36, 0x0c, 0x3a,
	0x93, 0x7f, 0x10, 0xc0, 0x94, 0xfd, 0x56, 0x70, 0x51, 0xd2, 0x24, 0xc7, 0x67, 0x30, 0x90, 0x28,
	0x63, 0xc9, 0xfa, 0x90, 0xaa, 0x04, 0x3e, 0xa4, 0x2a, 0x99, 0xcd, 0x35, 0xdf, 0x43, 0x5f, 0x33,
	0xe4, 0x77, 0x6f, 0xfa, 0xac, 0xbd, 0x50, 0x26, 0xe9, 0x39, 0xc2, 0x2f, 0xeb, 0x4d, 0xe7, 0x91,
	0xda, 0xf4, 0x3b, 0x79, 0xc7, 0xed, 0x3c, 0xb3, 0xf6, 0x9d, 0x07, 0x13, 0xfa, 0xb3, 0x0b, 0x83,
	0xe5, 0xce, 0xd0, 0x79, 0xd1, 0x78, 0xaa, 0x77, 0xf9, 0x7c, 0xde, 0x82, 0x75, 0x58, 0xd0, 0xc1,
	0xa7, 0xe0, 0x2c, 0x77, 0x6d, 0x05, 0x54, 0xf7, 0xf7, 0xee, 0x0a, 0x11, 0x9e, 0x80, 0x4b, 0x28,
	0x17, 0x49, 0x29, 0xe4, 0x92, 0x25, 0xdb, 0x82, 0x96, 0x1f, 0xeb, 0x50, 0xd6, 0x27, 0x34, 0x67,
	0x6f, 0xe9, 0x07, 0x15, 0x3e, 0xd4, 0xff, 0x46, 0x7e, 0x30, 0xe8, 0xaa, 0x12, 0x14, 0x7f, 0xb2,
	0x6f, 0x46, 0x7f, 0xbe, 0xee, 0x17, 0x7e, 0xa0, 0x44, 0xbf, 0x38, 0xea, 0xc7, 0xf7, 0xe2, 0xbf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0xe7, 0x68, 0xc4, 0x08, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TunnelClient is the client API for Tunnel service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TunnelClient interface {
	InitTunnel(ctx context.Context, opts ...grpc.CallOption) (Tunnel_InitTunnelClient, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type tunnelClient struct {
	cc *grpc.ClientConn
}

func NewTunnelClient(cc *grpc.ClientConn) TunnelClient {
	return &tunnelClient{cc}
}

func (c *tunnelClient) InitTunnel(ctx context.Context, opts ...grpc.CallOption) (Tunnel_InitTunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Tunnel_serviceDesc.Streams[0], "/remote.Tunnel/InitTunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &tunnelInitTunnelClient{stream}
	return x, nil
}

type Tunnel_InitTunnelClient interface {
	Send(*SocketDataRequest) error
	Recv() (*SocketDataResponse, error)
	grpc.ClientStream
}

type tunnelInitTunnelClient struct {
	grpc.ClientStream
}

func (x *tunnelInitTunnelClient) Send(m *SocketDataRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *tunnelInitTunnelClient) Recv() (*SocketDataResponse, error) {
	m := new(SocketDataResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *tunnelClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/remote.Tunnel/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelServer is the server API for Tunnel service.
type TunnelServer interface {
	InitTunnel(Tunnel_InitTunnelServer) error
	Ping(context.Context, *Empty) (*Empty, error)
}

func RegisterTunnelServer(s *grpc.Server, srv TunnelServer) {
	s.RegisterService(&_Tunnel_serviceDesc, srv)
}

func _Tunnel_InitTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TunnelServer).InitTunnel(&tunnelInitTunnelServer{stream})
}

type Tunnel_InitTunnelServer interface {
	Send(*SocketDataResponse) error
	Recv() (*SocketDataRequest, error)
	grpc.ServerStream
}

type tunnelInitTunnelServer struct {
	grpc.ServerStream
}

func (x *tunnelInitTunnelServer) Send(m *SocketDataResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *tunnelInitTunnelServer) Recv() (*SocketDataRequest, error) {
	m := new(SocketDataRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Tunnel_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.Tunnel/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Tunnel_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remote.Tunnel",
	HandlerType: (*TunnelServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Tunnel_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "InitTunnel",
			Handler:       _Tunnel_InitTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "remote.proto",
}

// DownstreamClient is the client API for Downstream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DownstreamClient interface {
	Download(ctx context.Context, opts ...grpc.CallOption) (Downstream_DownloadClient, error)
	Changes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Downstream_ChangesClient, error)
	ChangesCount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChangeAmount, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type downstreamClient struct {
	cc *grpc.ClientConn
}

func NewDownstreamClient(cc *grpc.ClientConn) DownstreamClient {
	return &downstreamClient{cc}
}

func (c *downstreamClient) Download(ctx context.Context, opts ...grpc.CallOption) (Downstream_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Downstream_serviceDesc.Streams[0], "/remote.Downstream/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &downstreamDownloadClient{stream}
	return x, nil
}

type Downstream_DownloadClient interface {
	Send(*Paths) error
	Recv() (*Chunk, error)
	grpc.ClientStream
}

type downstreamDownloadClient struct {
	grpc.ClientStream
}

func (x *downstreamDownloadClient) Send(m *Paths) error {
	return x.ClientStream.SendMsg(m)
}

func (x *downstreamDownloadClient) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *downstreamClient) Changes(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Downstream_ChangesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Downstream_serviceDesc.Streams[1], "/remote.Downstream/Changes", opts...)
	if err != nil {
		return nil, err
	}
	x := &downstreamChangesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Downstream_ChangesClient interface {
	Recv() (*ChangeChunk, error)
	grpc.ClientStream
}

type downstreamChangesClient struct {
	grpc.ClientStream
}

func (x *downstreamChangesClient) Recv() (*ChangeChunk, error) {
	m := new(ChangeChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *downstreamClient) ChangesCount(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ChangeAmount, error) {
	out := new(ChangeAmount)
	err := c.cc.Invoke(ctx, "/remote.Downstream/ChangesCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *downstreamClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/remote.Downstream/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownstreamServer is the server API for Downstream service.
type DownstreamServer interface {
	Download(Downstream_DownloadServer) error
	Changes(*Empty, Downstream_ChangesServer) error
	ChangesCount(context.Context, *Empty) (*ChangeAmount, error)
	Ping(context.Context, *Empty) (*Empty, error)
}

func RegisterDownstreamServer(s *grpc.Server, srv DownstreamServer) {
	s.RegisterService(&_Downstream_serviceDesc, srv)
}

func _Downstream_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DownstreamServer).Download(&downstreamDownloadServer{stream})
}

type Downstream_DownloadServer interface {
	Send(*Chunk) error
	Recv() (*Paths, error)
	grpc.ServerStream
}

type downstreamDownloadServer struct {
	grpc.ServerStream
}

func (x *downstreamDownloadServer) Send(m *Chunk) error {
	return x.ServerStream.SendMsg(m)
}

func (x *downstreamDownloadServer) Recv() (*Paths, error) {
	m := new(Paths)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Downstream_Changes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DownstreamServer).Changes(m, &downstreamChangesServer{stream})
}

type Downstream_ChangesServer interface {
	Send(*ChangeChunk) error
	grpc.ServerStream
}

type downstreamChangesServer struct {
	grpc.ServerStream
}

func (x *downstreamChangesServer) Send(m *ChangeChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Downstream_ChangesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownstreamServer).ChangesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.Downstream/ChangesCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownstreamServer).ChangesCount(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Downstream_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownstreamServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.Downstream/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownstreamServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Downstream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remote.Downstream",
	HandlerType: (*DownstreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangesCount",
			Handler:    _Downstream_ChangesCount_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Downstream_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _Downstream_Download_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Changes",
			Handler:       _Downstream_Changes_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "remote.proto",
}

// UpstreamClient is the client API for Upstream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpstreamClient interface {
	Checksums(ctx context.Context, in *Paths, opts ...grpc.CallOption) (*PathsChecksum, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (Upstream_UploadClient, error)
	RestartContainer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
	Remove(ctx context.Context, opts ...grpc.CallOption) (Upstream_RemoveClient, error)
	Execute(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Empty, error)
	Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error)
}

type upstreamClient struct {
	cc *grpc.ClientConn
}

func NewUpstreamClient(cc *grpc.ClientConn) UpstreamClient {
	return &upstreamClient{cc}
}

func (c *upstreamClient) Checksums(ctx context.Context, in *Paths, opts ...grpc.CallOption) (*PathsChecksum, error) {
	out := new(PathsChecksum)
	err := c.cc.Invoke(ctx, "/remote.Upstream/Checksums", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamClient) Upload(ctx context.Context, opts ...grpc.CallOption) (Upstream_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Upstream_serviceDesc.Streams[0], "/remote.Upstream/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &upstreamUploadClient{stream}
	return x, nil
}

type Upstream_UploadClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type upstreamUploadClient struct {
	grpc.ClientStream
}

func (x *upstreamUploadClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *upstreamUploadClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *upstreamClient) RestartContainer(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/remote.Upstream/RestartContainer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamClient) Remove(ctx context.Context, opts ...grpc.CallOption) (Upstream_RemoveClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Upstream_serviceDesc.Streams[1], "/remote.Upstream/Remove", opts...)
	if err != nil {
		return nil, err
	}
	x := &upstreamRemoveClient{stream}
	return x, nil
}

type Upstream_RemoveClient interface {
	Send(*Paths) error
	CloseAndRecv() (*Empty, error)
	grpc.ClientStream
}

type upstreamRemoveClient struct {
	grpc.ClientStream
}

func (x *upstreamRemoveClient) Send(m *Paths) error {
	return x.ClientStream.SendMsg(m)
}

func (x *upstreamRemoveClient) CloseAndRecv() (*Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *upstreamClient) Execute(ctx context.Context, in *Command, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/remote.Upstream/Execute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *upstreamClient) Ping(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/remote.Upstream/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpstreamServer is the server API for Upstream service.
type UpstreamServer interface {
	Checksums(context.Context, *Paths) (*PathsChecksum, error)
	Upload(Upstream_UploadServer) error
	RestartContainer(context.Context, *Empty) (*Empty, error)
	Remove(Upstream_RemoveServer) error
	Execute(context.Context, *Command) (*Empty, error)
	Ping(context.Context, *Empty) (*Empty, error)
}

func RegisterUpstreamServer(s *grpc.Server, srv UpstreamServer) {
	s.RegisterService(&_Upstream_serviceDesc, srv)
}

func _Upstream_Checksums_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Paths)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServer).Checksums(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.Upstream/Checksums",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServer).Checksums(ctx, req.(*Paths))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upstream_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpstreamServer).Upload(&upstreamUploadServer{stream})
}

type Upstream_UploadServer interface {
	SendAndClose(*Empty) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type upstreamUploadServer struct {
	grpc.ServerStream
}

func (x *upstreamUploadServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *upstreamUploadServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Upstream_RestartContainer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServer).RestartContainer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.Upstream/RestartContainer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServer).RestartContainer(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upstream_Remove_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpstreamServer).Remove(&upstreamRemoveServer{stream})
}

type Upstream_RemoveServer interface {
	SendAndClose(*Empty) error
	Recv() (*Paths, error)
	grpc.ServerStream
}

type upstreamRemoveServer struct {
	grpc.ServerStream
}

func (x *upstreamRemoveServer) SendAndClose(m *Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *upstreamRemoveServer) Recv() (*Paths, error) {
	m := new(Paths)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Upstream_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.Upstream/Execute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServer).Execute(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _Upstream_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpstreamServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/remote.Upstream/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpstreamServer).Ping(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Upstream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "remote.Upstream",
	HandlerType: (*UpstreamServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Checksums",
			Handler:    _Upstream_Checksums_Handler,
		},
		{
			MethodName: "RestartContainer",
			Handler:    _Upstream_RestartContainer_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _Upstream_Execute_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Upstream_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _Upstream_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Remove",
			Handler:       _Upstream_Remove_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "remote.proto",
}
