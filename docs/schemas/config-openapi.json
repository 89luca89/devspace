{
	"swagger": "2.0",
	"info": {
		"version": "v2beta1",
		"title": "devspace.yaml"
	},
	"paths": {},
	"definitions": {
		"Config": {
        "$schema": "http://json-schema.org/draft/2020-12/schema",
        "$id": "https://github.com/loft-sh/devspace/pkg/devspace/config/versions/latest/config",
        "$defs": {
          "Attach": {
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "If enabled is false, DevSpace will not attach to the pod"
              },
              "disableReplace": {
                "type": "boolean",
                "description": "If this is true, DevSpace will not replace the pod"
              },
              "disableTTY": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "BandwidthLimits": {
            "properties": {
              "download": {
                "type": "integer"
              },
              "upload": {
                "type": "integer"
              }
            },
            "type": "object",
            "description": "BandwidthLimits defines the struct for specifying the sync bandwidth limits"
          },
          "BuildKitConfig": {
            "properties": {
              "preferMinikube": {
                "type": "boolean",
                "description": "If false, will not try to use the minikube docker daemon to build the image"
              },
              "inCluster": {
                "$ref": "#/definitions/Config/$defs/BuildKitInClusterConfig",
                "description": "If specified, DevSpace will use BuildKit to build the image within the cluster"
              },
              "args": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "Additional arguments to call docker buildx build with"
              },
              "command": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "Override the base command to create a builder and build images. Defaults to [\"docker\", \"buildx\"]"
              }
            },
            "type": "object",
            "description": "BuildKitConfig tells the DevSpace CLI to"
          },
          "BuildKitInClusterConfig": {
            "properties": {
              "name": {
                "type": "string",
                "description": "Name is the name of the builder to use. If omitted, DevSpace will try to create\nor reuse a builder in the form devspace-$NAMESPACE"
              },
              "namespace": {
                "type": "string",
                "description": "Namespace where to create the builder deployment in. Defaults to the current\nactive namespace."
              },
              "rootless": {
                "type": "boolean",
                "description": "If enabled will create a rootless builder deployment."
              },
              "image": {
                "type": "string",
                "description": "The docker image to use for the BuildKit deployment"
              },
              "nodeSelector": {
                "type": "string",
                "description": "The node selector to use for the BuildKit deployment"
              },
              "noCreate": {
                "type": "boolean",
                "description": "By default, DevSpace will try to create a new builder if it cannot be found.\nIf this is true, DevSpace will fail if the specified builder cannot be found."
              },
              "noRecreate": {
                "type": "boolean",
                "description": "By default, DevSpace will try to recreate the builder if the builder configuration\nin the devspace.yaml differs from the actual builder configuration. If this is\ntrue, DevSpace will not try to do that."
              },
              "noLoad": {
                "type": "boolean",
                "description": "If enabled, DevSpace will not try to load the built image into the local docker\ndaemon if skip push is defined"
              },
              "createArgs": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "Additional args to create the builder with."
              }
            },
            "type": "object",
            "description": "BuildKitInClusterConfig holds the buildkit builder config"
          },
          "ChartConfig": {
            "properties": {
              "git": {
                "type": "string"
              },
              "cloneArgs": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "disableShallow": {
                "type": "boolean"
              },
              "disablePull": {
                "type": "boolean"
              },
              "subPath": {
                "type": "string"
              },
              "branch": {
                "type": "string"
              },
              "tag": {
                "type": "string"
              },
              "revision": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "repo": {
                "type": "string"
              },
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            },
            "type": "object",
            "description": "ChartConfig defines the helm chart options"
          },
          "CommandConfig": {
            "properties": {
              "name": {
                "type": "string",
                "description": "Name is the name of a command that is used via `devspace run NAME`"
              },
              "command": {
                "type": "string",
                "description": "Command is the command that should be executed. For example: 'echo 123'"
              },
              "disableReplace": {
                "type": "boolean",
                "description": "DisableReplace signals DevSpace to not replace the default command. E.g.\ndev does not replace devspace dev."
              },
              "internal": {
                "type": "boolean",
                "description": "Internal commands are not show in list and are usable through run_command"
              },
              "args": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "Args are optional and if defined, command is not executed within a shell\nand rather directly."
              },
              "appendArgs": {
                "type": "boolean",
                "description": "AppendArgs will append arguments passed to the DevSpace command automatically to\nthe specified command."
              },
              "description": {
                "type": "string",
                "description": "Description describes what the command is doing and can be seen in `devspace list commands`"
              }
            },
            "type": "object",
            "required": [
              "name",
              "command",
              "description"
            ],
            "description": "CommandConfig defines the command specification"
          },
          "CustomConfig": {
            "properties": {
              "command": {
                "type": "string"
              },
              "onChange": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "commands": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/CustomConfigCommand"
                },
                "type": "array",
                "description": "Depreacted do not use anymore"
              },
              "args": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "appendArgs": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "imageFlag": {
                "type": "string"
              },
              "imageTagOnly": {
                "type": "boolean"
              },
              "skipImageArg": {
                "type": "boolean"
              }
            },
            "type": "object",
            "description": "CustomConfig tells the DevSpace CLI to build with a custom build script"
          },
          "CustomConfigCommand": {
            "properties": {
              "command": {
                "type": "string"
              },
              "os": {
                "type": "string"
              }
            },
            "type": "object",
            "description": "CustomConfigCommand holds the information about a command on a specific operating system"
          },
          "DependencyConfig": {
            "properties": {
              "git": {
                "type": "string"
              },
              "cloneArgs": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "disableShallow": {
                "type": "boolean"
              },
              "disablePull": {
                "type": "boolean"
              },
              "subPath": {
                "type": "string"
              },
              "branch": {
                "type": "string"
              },
              "tag": {
                "type": "string"
              },
              "revision": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "pipeline": {
                "type": "string"
              },
              "profiles": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "disableProfileActivation": {
                "type": "boolean"
              },
              "vars": {
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "overwriteVars": {
                "type": "boolean"
              },
              "ignoreDependencies": {
                "type": "boolean"
              },
              "namespace": {
                "type": "string"
              }
            },
            "type": "object",
            "required": [
              "name"
            ],
            "description": "DependencyConfig defines the devspace dependency"
          },
          "DeploymentConfig": {
            "properties": {
              "name": {
                "type": "string"
              },
              "namespace": {
                "type": "string"
              },
              "updateImageTags": {
                "type": "boolean"
              },
              "helm": {
                "$ref": "#/definitions/Config/$defs/HelmConfig"
              },
              "kubectl": {
                "$ref": "#/definitions/Config/$defs/KubectlConfig"
              }
            },
            "type": "object",
            "required": [
              "name"
            ],
            "description": "DeploymentConfig defines the configuration how the devspace should be deployed"
          },
          "DevContainer": {
            "properties": {
              "container": {
                "type": "string"
              },
              "arch": {
                "type": "string",
                "description": "Target Container architecture to use for the devspacehelper (currently amd64 or arm64). Defaults to amd64"
              },
              "reversePorts": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/PortMapping"
                },
                "type": "array"
              },
              "command": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "args": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "workingDir": {
                "type": "string"
              },
              "resources": {
                "$ref": "#/definitions/Config/$defs/PodResources"
              },
              "ssh": {
                "$ref": "#/definitions/Config/$defs/SSH"
              },
              "proxyCommands": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/ProxyCommand"
                },
                "type": "array"
              },
              "env": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/EnvVar"
                },
                "type": "array"
              },
              "restartHelperPath": {
                "type": "string"
              },
              "disableRestartHelper": {
                "type": "boolean"
              },
              "terminal": {
                "$ref": "#/definitions/Config/$defs/Terminal"
              },
              "logs": {
                "$ref": "#/definitions/Config/$defs/Logs"
              },
              "attach": {
                "$ref": "#/definitions/Config/$defs/Attach"
              },
              "devImage": {
                "type": "string"
              },
              "persistPaths": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/PersistentPath"
                },
                "type": "array"
              },
              "sync": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/SyncConfig"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "DevPod": {
            "properties": {
              "name": {
                "type": "string"
              },
              "imageSelector": {
                "type": "string"
              },
              "labelSelector": {
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "namespace": {
                "type": "string"
              },
              "open": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/OpenConfig"
                },
                "type": "array",
                "description": "Open holds the open config for urls"
              },
              "ports": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/PortMapping"
                },
                "type": "array"
              },
              "patches": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/PatchConfig"
                },
                "type": "array"
              },
              "persistenceOptions": {
                "$ref": "#/definitions/Config/$defs/PersistenceOptions"
              },
              "container": {
                "type": "string"
              },
              "arch": {
                "type": "string",
                "description": "Target Container architecture to use for the devspacehelper (currently amd64 or arm64). Defaults to amd64"
              },
              "reversePorts": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/PortMapping"
                },
                "type": "array"
              },
              "command": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "args": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "workingDir": {
                "type": "string"
              },
              "resources": {
                "$ref": "#/definitions/Config/$defs/PodResources"
              },
              "ssh": {
                "$ref": "#/definitions/Config/$defs/SSH"
              },
              "proxyCommands": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/ProxyCommand"
                },
                "type": "array"
              },
              "env": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/EnvVar"
                },
                "type": "array"
              },
              "restartHelperPath": {
                "type": "string"
              },
              "disableRestartHelper": {
                "type": "boolean"
              },
              "terminal": {
                "$ref": "#/definitions/Config/$defs/Terminal"
              },
              "logs": {
                "$ref": "#/definitions/Config/$defs/Logs"
              },
              "attach": {
                "$ref": "#/definitions/Config/$defs/Attach"
              },
              "devImage": {
                "type": "string"
              },
              "persistPaths": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/PersistentPath"
                },
                "type": "array"
              },
              "sync": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/SyncConfig"
                },
                "type": "array"
              },
              "containers": {
                "patternProperties": {
                  ".*": {
                    "$ref": "#/definitions/Config/$defs/DevContainer"
                  }
                },
                "type": "object"
              }
            },
            "type": "object"
          },
          "DockerConfig": {
            "properties": {
              "preferMinikube": {
                "type": "boolean"
              },
              "disableFallback": {
                "type": "boolean"
              },
              "useCli": {
                "type": "boolean"
              },
              "args": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "useBuildKit": {
                "type": "boolean",
                "description": "Deprecated"
              }
            },
            "type": "object",
            "description": "DockerConfig tells the DevSpace CLI to build with Docker on Minikube or on localhost"
          },
          "EnvVar": {
            "properties": {
              "name": {
                "type": "string"
              },
              "value": {
                "type": "string"
              }
            },
            "type": "object",
            "required": [
              "name",
              "value"
            ]
          },
          "HelmConfig": {
            "properties": {
              "chart": {
                "$ref": "#/definitions/Config/$defs/ChartConfig"
              },
              "values": {
                "type": "object"
              },
              "valuesFiles": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "displayOutput": {
                "type": "boolean"
              },
              "templateArgs": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "upgradeArgs": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "fetchArgs": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object",
            "description": "HelmConfig defines the specific helm options used during deployment"
          },
          "HookConfig": {
            "properties": {
              "name": {
                "type": "string",
                "description": "Name is the name of the hook"
              },
              "disabled": {
                "type": "boolean",
                "description": "If true, the hook is disabled and not executed"
              },
              "events": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "Events are the events when the hook should be executed"
              },
              "command": {
                "type": "string",
                "description": "Command is the base command that is either executed locally or in a remote container.\nCommand is mutually exclusive with other hook actions. In the case this is defined\ntogether with where.container, DevSpace will until the target container is running and\nonly then execute the command. If the container does not start in time, DevSpace will fail."
              },
              "args": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "Args are additional arguments passed together with the command to execute."
              },
              "os": {
                "type": "string",
                "description": "If an operating system is defined, the hook will only be executed for the given os.\nAll supported golang OS types are supported and multiple can be combined with ','."
              },
              "upload": {
                "$ref": "#/definitions/Config/$defs/HookSyncConfig",
                "description": "If Upload is specified, DevSpace will upload certain local files or folders into a\nremote container."
              },
              "download": {
                "$ref": "#/definitions/Config/$defs/HookSyncConfig",
                "description": "Same as Upload, but with this option DevSpace will download files or folders from\na remote container."
              },
              "logs": {
                "$ref": "#/definitions/Config/$defs/HookLogsConfig",
                "description": "If logs is defined will print the logs of the target container. This is useful for containers\nthat should finish like init containers or job pods. Otherwise this hook will never terminate."
              },
              "wait": {
                "$ref": "#/definitions/Config/$defs/HookWaitConfig",
                "description": "If wait is defined the hook will wait until the matched pod or container is running or is terminated\nwith a certain exit code."
              },
              "background": {
                "type": "boolean",
                "description": "If true, the hook will be executed in the background."
              },
              "silent": {
                "type": "boolean",
                "description": "If true, the hook will not output anything to the standard out of DevSpace except\nfor the case when the hook fails, where DevSpace will show the error including\nthe captured output streams of the hook."
              },
              "container": {
                "$ref": "#/definitions/Config/$defs/HookContainer",
                "description": "Container specifies where the hook should be run. If this is omitted DevSpace expects a\nlocal command hook."
              }
            },
            "type": "object",
            "required": [
              "events"
            ],
            "description": "HookConfig defines a hook"
          },
          "HookContainer": {
            "properties": {
              "labelSelector": {
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "pod": {
                "type": "string"
              },
              "namespace": {
                "type": "string"
              },
              "imageSelector": {
                "type": "string"
              },
              "containerName": {
                "type": "string"
              },
              "wait": {
                "type": "boolean"
              },
              "timeout": {
                "type": "integer"
              },
              "once": {
                "type": "boolean"
              }
            },
            "type": "object",
            "description": "HookContainer defines how to select one or more containers to execute a hook in"
          },
          "HookLogsConfig": {
            "properties": {
              "tailLines": {
                "type": "integer",
                "description": "If set, the number of lines from the end of the logs to show. If not specified,\nlogs are shown from the creation of the container"
              }
            },
            "type": "object",
            "description": "HookLogsConfig defines a hook logs config"
          },
          "HookSyncConfig": {
            "properties": {
              "localPath": {
                "type": "string"
              },
              "containerPath": {
                "type": "string"
              }
            },
            "type": "object",
            "description": "HookSyncConfig defines a hook upload config"
          },
          "HookWaitConfig": {
            "properties": {
              "running": {
                "type": "boolean",
                "description": "If running is true, will wait until the matched containers are running. Can be used together with terminatedWithCode."
              },
              "terminatedWithCode": {
                "type": "integer",
                "description": "If terminatedWithCode is not nil, will wait until the matched containers are terminated with the given exit code.\nIf the container has exited with a different exit code, the hook will fail. Can be used together with running."
              },
              "timeout": {
                "type": "integer",
                "description": "The amount of seconds to wait until the hook will fail. Defaults to 150 seconds."
              }
            },
            "type": "object",
            "description": "HookWaitConfig defines a hook wait config"
          },
          "Image": {
            "properties": {
              "image": {
                "type": "string",
                "description": "Image is the complete image name including registry and repository\nfor example myregistry.com/mynamespace/myimage"
              },
              "tags": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "Tags is an array that specifies all tags that should be build during\nthe build process. If this is empty, devspace will generate a random tag"
              },
              "dockerfile": {
                "type": "string",
                "description": "Specifies a path (relative or absolute) to the dockerfile"
              },
              "context": {
                "type": "string",
                "description": "The context path to build with"
              },
              "entrypoint": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "Entrypoint specifies an entrypoint that will be appended to the dockerfile during\nimage build in memory. Example: [\"sleep\", \"99999\"]"
              },
              "cmd": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "Cmd specifies the arguments for the entrypoint that will be appended\nduring build in memory to the dockerfile"
              },
              "createPullSecret": {
                "type": "boolean",
                "description": "CreatePullSecret specifies if a pull secret should be created for this image in the\ntarget namespace. Defaults to true"
              },
              "injectRestartHelper": {
                "type": "boolean",
                "description": "If true injects a small restart script into the container and wraps the entrypoint of that\ncontainer, so that devspace is able to restart the complete container during sync.\nPlease make sure you either have an Entrypoint defined in the devspace config or in the\ndockerfile for this image, otherwise devspace will fail."
              },
              "restartHelperPath": {
                "type": "string",
                "description": "If specified DevSpace will load the restart helper from this location instead of using the bundled\none within DevSpace. Can be either a local path or an URL where to find the restart helper."
              },
              "appendDockerfileInstructions": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "These instructions will be appended to the Dockerfile that is build at the current build target\nand are appended before the entrypoint and cmd instructions"
              },
              "rebuildStrategy": {
                "type": "string",
                "description": "RebuildStrategy is used to determine when DevSpace should rebuild an image. By default, devspace will\nrebuild an image if one of the following conditions is true:\n- The dockerfile has changed\n- The configuration within the devspace.yaml for the image has changed\n- A file within the docker context (excluding .dockerignore rules) has changed\nThis option is ignored for custom builds."
              },
              "target": {
                "type": "string",
                "description": "Target is the target that should get used during the build. Only works if the dockerfile supports this"
              },
              "network": {
                "type": "string",
                "description": "Network is the network that should get used to build the image"
              },
              "buildArgs": {
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "BuildArgs are the build args that should get passed to the build config"
              },
              "skipPush": {
                "type": "boolean",
                "description": "SkipPush will not push the image to a registry if enabled. Only works if docker or buildkit is chosen as\nas build method"
              },
              "docker": {
                "$ref": "#/definitions/Config/$defs/DockerConfig",
                "description": "If docker is specified, DevSpace will build the image using the local docker daemon"
              },
              "kaniko": {
                "$ref": "#/definitions/Config/$defs/KanikoConfig",
                "description": "If kaniko is specified, DevSpace will build the image in-cluster with kaniko"
              },
              "buildKit": {
                "$ref": "#/definitions/Config/$defs/BuildKitConfig",
                "description": "If buildKit is specified, DevSpace will build the image either in-cluster or locally with BuildKit"
              },
              "custom": {
                "$ref": "#/definitions/Config/$defs/CustomConfig",
                "description": "If custom is specified, DevSpace will build the image with the help of\na custom script."
              }
            },
            "type": "object",
            "required": [
              "image"
            ],
            "description": "Image defines the image specification"
          },
          "Import": {
            "properties": {
              "git": {
                "type": "string"
              },
              "cloneArgs": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "disableShallow": {
                "type": "boolean"
              },
              "disablePull": {
                "type": "boolean"
              },
              "subPath": {
                "type": "string"
              },
              "branch": {
                "type": "string"
              },
              "tag": {
                "type": "string"
              },
              "revision": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "enabled": {
                "type": "boolean",
                "description": "Enabled specifies if the given import should be enabled"
              }
            },
            "type": "object",
            "description": "Import specifies the source of the devspace config to merge"
          },
          "KanikoAdditionalMount": {
            "properties": {
              "secret": {
                "$ref": "#/definitions/Config/$defs/KanikoAdditionalMountSecret",
                "description": "The secret that should be mounted"
              },
              "configMap": {
                "$ref": "#/definitions/Config/$defs/KanikoAdditionalMountConfigMap",
                "description": "The configMap that should be mounted"
              },
              "readOnly": {
                "type": "boolean",
                "description": "Mounted read-only if true, read-write otherwise (false or unspecified).\nDefaults to false.\n+optional"
              },
              "mountPath": {
                "type": "string",
                "description": "Path within the container at which the volume should be mounted.  Must\nnot contain ':'."
              },
              "subPath": {
                "type": "string",
                "description": "Path within the volume from which the container's volume should be mounted.\nDefaults to \"\" (volume's root).\n+optional"
              }
            },
            "type": "object",
            "description": "KanikoAdditionalMount tells devspace how the additional mount of the kaniko pod should look like"
          },
          "KanikoAdditionalMountConfigMap": {
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the configmap\n+optional"
              },
              "items": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/KanikoAdditionalMountKeyToPath"
                },
                "type": "array",
                "description": "If unspecified, each key-value pair in the Data field of the referenced\nConfigMap will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the ConfigMap,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional"
              },
              "defaultMode": {
                "type": "integer",
                "description": "Optional: mode bits to use on created files by default. Must be a\nvalue between 0 and 0777. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional"
              }
            },
            "type": "object"
          },
          "KanikoAdditionalMountKeyToPath": {
            "properties": {
              "key": {
                "type": "string",
                "description": "The key to project."
              },
              "path": {
                "type": "string",
                "description": "The relative path of the file to map the key to.\nMay not be an absolute path.\nMay not contain the path element '..'.\nMay not start with the string '..'."
              },
              "mode": {
                "type": "integer",
                "description": "Optional: mode bits to use on this file, must be a value between 0\nand 0777. If not specified, the volume defaultMode will be used.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional"
              }
            },
            "type": "object",
            "required": [
              "key",
              "path"
            ]
          },
          "KanikoAdditionalMountSecret": {
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the secret in the pod's namespace to use.\nMore info: https://kubernetes.io/docs/concepts/storage/volumes#secret\n+optional"
              },
              "items": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/KanikoAdditionalMountKeyToPath"
                },
                "type": "array",
                "description": "If unspecified, each key-value pair in the Data field of the referenced\nSecret will be projected into the volume as a file whose name is the\nkey and content is the value. If specified, the listed keys will be\nprojected into the specified paths, and unlisted keys will not be\npresent. If a key is specified which is not present in the Secret,\nthe volume setup will error unless it is marked optional. Paths must be\nrelative and may not contain the '..' path or start with '..'.\n+optional"
              },
              "defaultMode": {
                "type": "integer",
                "description": "Optional: mode bits to use on created files by default. Must be a\nvalue between 0 and 0777. Defaults to 0644.\nDirectories within the path are not affected by this setting.\nThis might be in conflict with other options that affect the file\nmode, like fsGroup, and the result can be other mode bits set.\n+optional"
              }
            },
            "type": "object",
            "required": [
              "name"
            ]
          },
          "KanikoConfig": {
            "properties": {
              "cache": {
                "type": "boolean",
                "description": "if a cache repository should be used. defaults to true"
              },
              "snapshotMode": {
                "type": "string",
                "description": "the snapshot mode kaniko should use. defaults to time"
              },
              "image": {
                "type": "string",
                "description": "the image name of the kaniko pod to use"
              },
              "initImage": {
                "type": "string",
                "description": "the image to init the kaniko pod"
              },
              "args": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "additional arguments that should be passed to kaniko"
              },
              "command": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "replace the starting command for the kaniko container"
              },
              "namespace": {
                "type": "string",
                "description": "the namespace where the kaniko pod should be run"
              },
              "insecure": {
                "type": "boolean",
                "description": "if true pushing to insecure registries is allowed"
              },
              "pullSecret": {
                "type": "string",
                "description": "the pull secret to mount by default"
              },
              "skipPullSecretMount": {
                "type": "boolean",
                "description": "If true will skip mounting the pull secret"
              },
              "nodeSelector": {
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "the node selector to use for the kaniko pod"
              },
              "tolerations": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/Toleration"
                },
                "type": "array",
                "description": "tolerations list to use for the kaniko pod"
              },
              "serviceAccount": {
                "type": "string",
                "description": "the service account to use for the kaniko pod"
              },
              "annotations": {
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "extra annotations that will be added to the build pod"
              },
              "labels": {
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "extra labels that will be added to the build pod"
              },
              "initEnv": {
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "extra environment variables that will be added to the build init container"
              },
              "env": {
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "extra environment variables that will be added to the build kaniko container\nWill populate the env.value field."
              },
              "envFrom": {
                "patternProperties": {
                  ".*": {
                    "type": "object"
                  }
                },
                "type": "object",
                "description": "extra environment variables from configmap or secret that will be added to the build kaniko container\nWill populate the env.valueFrom field."
              },
              "additionalMounts": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/KanikoAdditionalMount"
                },
                "type": "array",
                "description": "additional mounts that will be added to the build pod"
              },
              "resources": {
                "$ref": "#/definitions/Config/$defs/PodResources",
                "description": "the resources that should be set on the kaniko pod"
              }
            },
            "type": "object",
            "description": "KanikoConfig tells the DevSpace CLI to build with Docker on Minikube or on localhost"
          },
          "KubectlConfig": {
            "properties": {
              "manifests": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "kustomize": {
                "type": "boolean"
              },
              "kustomizeArgs": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "createArgs": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "applyArgs": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "kustomizeBinaryPath": {
                "type": "string"
              },
              "kubectlBinaryPath": {
                "type": "string"
              }
            },
            "type": "object",
            "description": "KubectlConfig defines the specific kubectl options used during deployment"
          },
          "Logs": {
            "properties": {
              "enabled": {
                "type": "boolean",
                "description": "If enabled is false, DevSpace will not print any logs"
              },
              "lastLines": {
                "type": "integer",
                "description": "LastLines is the amount of lines to print of the running container initially"
              }
            },
            "type": "object"
          },
          "OpenConfig": {
            "properties": {
              "url": {
                "type": "string"
              }
            },
            "type": "object",
            "description": "OpenConfig defines what to open after services have been started"
          },
          "PatchConfig": {
            "properties": {
              "op": {
                "type": "string"
              },
              "path": {
                "type": "string"
              },
              "value": true,
              "from": {
                "type": "string"
              }
            },
            "type": "object",
            "required": [
              "op",
              "path"
            ],
            "description": "PatchConfig describes a config patch and how it should be applied"
          },
          "PersistenceOptions": {
            "properties": {
              "size": {
                "type": "string"
              },
              "storageClassName": {
                "type": "string"
              },
              "accessModes": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "readOnly": {
                "type": "boolean"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "PersistentPath": {
            "properties": {
              "path": {
                "type": "string"
              },
              "volumePath": {
                "type": "string"
              },
              "readOnly": {
                "type": "boolean"
              },
              "skipPopulate": {
                "type": "boolean"
              },
              "initContainer": {
                "$ref": "#/definitions/Config/$defs/PersistentPathInitContainer"
              }
            },
            "type": "object"
          },
          "PersistentPathInitContainer": {
            "properties": {
              "resources": {
                "$ref": "#/definitions/Config/$defs/PodResources"
              }
            },
            "type": "object"
          },
          "Pipeline": {
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the pipeline, will be filled automatically"
              },
              "continueOnError": {
                "type": "boolean",
                "description": "ContinueOnError will not fail the whole job and pipeline if\na call within the step fails."
              },
              "run": {
                "type": "string",
                "description": "Run is the actual shell command that should be executed during this pipeline"
              }
            },
            "type": "object",
            "description": "Pipeline defines what DevSpace should do."
          },
          "PodResources": {
            "properties": {
              "requests": {
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The requests part of the resources"
              },
              "limits": {
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "The limits part of the resources"
              }
            },
            "type": "object",
            "description": "PodResources describes the resources section of the started kaniko pod"
          },
          "PortMapping": {
            "properties": {
              "port": {
                "type": "string"
              },
              "bindAddress": {
                "type": "string"
              }
            },
            "type": "object",
            "required": [
              "port"
            ],
            "description": "PortMapping defines the ports for a PortMapping"
          },
          "ProfileActivation": {
            "properties": {
              "env": {
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "Environment defines key/value pairs where the key is the name of the environment variable and the value is a regular expression used to match the variable's value.\nWhen multiple keys are specified, they must all evaluate to true to activate the profile."
              },
              "vars": {
                "patternProperties": {
                  ".*": {
                    "type": "string"
                  }
                },
                "type": "object",
                "description": "Vars defines key/value pairs where the key is the name of the variable and the value is a regular expression used to match the variable's value.\nWhen multiple keys are specified, they must all evaluate to true to activate the profile."
              }
            },
            "type": "object",
            "description": "ProfileActivation defines rules that automatically activate a profile when evaluated to true"
          },
          "ProfileConfig": {
            "properties": {
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "parent": {
                "type": "string"
              },
              "parents": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/ProfileParent"
                },
                "type": "array"
              },
              "patches": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/PatchConfig"
                },
                "type": "array"
              },
              "replace": {
                "$ref": "#/definitions/Config/$defs/ProfileConfigStructure"
              },
              "merge": {
                "$ref": "#/definitions/Config/$defs/ProfileConfigStructure"
              },
              "strategicMerge": {
                "$ref": "#/definitions/Config/$defs/ProfileConfigStructure"
              },
              "activation": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/ProfileActivation"
                },
                "type": "array"
              }
            },
            "type": "object",
            "required": [
              "name"
            ],
            "description": "ProfileConfig defines a profile config"
          },
          "ProfileConfigStructure": {
            "properties": {
              "vars": {
                "items": true,
                "type": "array"
              },
              "pullSecrets": {
                "items": true,
                "type": "array"
              },
              "images": {
                "type": "object"
              },
              "deployments": {
                "items": true,
                "type": "array"
              },
              "dev": {
                "type": "object"
              },
              "hooks": {
                "items": true,
                "type": "array"
              },
              "commands": {
                "items": true,
                "type": "array"
              },
              "dependencies": {
                "items": true,
                "type": "array"
              }
            },
            "type": "object",
            "description": "ProfileConfigStructure is the base structure used to validate profiles"
          },
          "ProfileParent": {
            "properties": {
              "source": {
                "$ref": "#/definitions/Config/$defs/SourceConfig"
              },
              "profile": {
                "type": "string"
              }
            },
            "type": "object",
            "required": [
              "profile"
            ],
            "description": "ProfileParent defines where to load the profile from"
          },
          "ProxyCommand": {
            "properties": {
              "command": {
                "type": "string"
              },
              "localCommand": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "PullSecretConfig": {
            "properties": {
              "name": {
                "type": "string",
                "description": "Name is the pull secret name to deploy"
              },
              "registry": {
                "type": "string",
                "description": "The registry to create the image pull secret for.\ne.g. gcr.io"
              },
              "username": {
                "type": "string",
                "description": "The username of the registry. If this is empty, devspace will try\nto receive the auth data from the local docker"
              },
              "password": {
                "type": "string",
                "description": "The password to use for the registry. If this is empty, devspace will\ntry to receive the auth data from the local docker"
              },
              "email": {
                "type": "string",
                "description": "The optional email to use"
              },
              "secret": {
                "type": "string",
                "description": "The secret to create"
              },
              "serviceAccounts": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "The service account to add the secret to"
              }
            },
            "type": "object",
            "required": [
              "registry"
            ],
            "description": "PullSecretConfig defines a pull secret that should be created by DevSpace"
          },
          "RequireCommand": {
            "properties": {
              "name": {
                "type": "string",
                "description": "Name is the name of the command that should be installed"
              },
              "versionArgs": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "VersionArgs are the arguments to retrieve the version of the command"
              },
              "versionRegEx": {
                "type": "string",
                "description": "VersionRegEx is the regex that is used to parse the version"
              },
              "version": {
                "type": "string",
                "description": "Version constraint of the command that should be installed"
              }
            },
            "type": "object",
            "required": [
              "name"
            ]
          },
          "RequireConfig": {
            "properties": {
              "devspace": {
                "type": "string",
                "description": "DevSpace specifies the DevSpace version constraint that is needed to use this config"
              },
              "commands": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/RequireCommand"
                },
                "type": "array",
                "description": "Commands specifies an array of commands that need to be installed locally to use this config"
              },
              "plugins": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/RequirePlugin"
                },
                "type": "array",
                "description": "Plugins specifies an array of plugins that need to be installed locally"
              }
            },
            "type": "object"
          },
          "RequirePlugin": {
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the plugin that should be installed"
              },
              "version": {
                "type": "string",
                "description": "Version constraint of the plugin that should be installed"
              }
            },
            "type": "object",
            "required": [
              "name",
              "version"
            ]
          },
          "SSH": {
            "properties": {
              "enabled": {
                "type": "boolean"
              },
              "localHostname": {
                "type": "string",
                "description": "LocalHostname is the local ssh host to write to the ~/.ssh/config"
              },
              "localPort": {
                "type": "integer",
                "description": "LocalPort is the local port to forward from, if empty will be random"
              },
              "remoteAddress": {
                "type": "string",
                "description": "RemoteAddress is the address to listen to inside the container"
              }
            },
            "type": "object"
          },
          "SourceConfig": {
            "properties": {
              "git": {
                "type": "string"
              },
              "cloneArgs": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "disableShallow": {
                "type": "boolean"
              },
              "disablePull": {
                "type": "boolean"
              },
              "subPath": {
                "type": "string"
              },
              "branch": {
                "type": "string"
              },
              "tag": {
                "type": "string"
              },
              "revision": {
                "type": "string"
              },
              "path": {
                "type": "string"
              }
            },
            "type": "object",
            "description": "SourceConfig defines the dependency source"
          },
          "SyncCommand": {
            "properties": {
              "command": {
                "type": "string"
              },
              "args": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object",
            "description": "SyncCommand holds a command definition"
          },
          "SyncConfig": {
            "properties": {
              "printLogs": {
                "type": "boolean"
              },
              "path": {
                "type": "string"
              },
              "excludePaths": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "excludeFile": {
                "type": "string"
              },
              "downloadExcludePaths": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "downloadExcludeFile": {
                "type": "string"
              },
              "uploadExcludePaths": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "uploadExcludeFile": {
                "type": "string"
              },
              "initialSync": {
                "type": "string"
              },
              "initialSyncCompareBy": {
                "type": "string"
              },
              "disableDownload": {
                "type": "boolean"
              },
              "disableUpload": {
                "type": "boolean"
              },
              "noWatch": {
                "type": "boolean"
              },
              "polling": {
                "type": "boolean"
              },
              "waitInitialSync": {
                "type": "boolean"
              },
              "bandwidthLimits": {
                "$ref": "#/definitions/Config/$defs/BandwidthLimits"
              },
              "onUpload": {
                "$ref": "#/definitions/Config/$defs/SyncOnUpload"
              }
            },
            "type": "object",
            "description": "SyncConfig defines the paths for a SyncFolder"
          },
          "SyncExec": {
            "properties": {
              "name": {
                "type": "string"
              },
              "command": {
                "type": "string"
              },
              "args": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "failOnError": {
                "type": "boolean"
              },
              "local": {
                "type": "boolean"
              },
              "onChange": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              }
            },
            "type": "object"
          },
          "SyncExecCommand": {
            "properties": {
              "command": {
                "type": "string"
              },
              "args": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "onFileChange": {
                "$ref": "#/definitions/Config/$defs/SyncCommand",
                "description": "OnFileChange is invoked after every file change. DevSpace will wait for the command to successfully finish\nand then will continue to upload files \u0026 create folders"
              },
              "onDirCreate": {
                "$ref": "#/definitions/Config/$defs/SyncCommand",
                "description": "OnDirCreate is invoked after every directory that is created. DevSpace will wait for the command to successfully finish\nand then will continue to upload files \u0026 create folders"
              },
              "onBatch": {
                "$ref": "#/definitions/Config/$defs/SyncCommand",
                "description": "OnBatch executes the given command after a batch of changes has been processed. DevSpace will wait for the command to finish\nand then will continue execution. This is useful for commands\nthat shouldn't be executed after every single change that may take a little bit longer like recompiling etc."
              }
            },
            "type": "object",
            "description": "SyncExecCommand holds the configuration of commands that should be executed when files / folders are change"
          },
          "SyncOnUpload": {
            "properties": {
              "restartContainer": {
                "type": "boolean",
                "description": "If true restart container will try to restart the container after a change has been made. Make sure that\nimages.*.injectRestartHelper is enabled for the container that should be restarted or the devspace-restart-helper\nscript is present in the container root folder."
              },
              "exec": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/SyncExec"
                },
                "type": "array",
                "description": "Exec will execute the given commands in order after a sync operation"
              },
              "execRemote": {
                "$ref": "#/definitions/Config/$defs/SyncExecCommand",
                "description": "Defines what commands should be executed on the container side if a change is uploaded and applied in the target\ncontainer"
              }
            },
            "type": "object",
            "description": "SyncOnUpload defines the struct for the command that should be executed when files / folders are uploaded"
          },
          "Terminal": {
            "properties": {
              "command": {
                "type": "string"
              },
              "workDir": {
                "type": "string"
              },
              "enabled": {
                "type": "boolean",
                "description": "If enabled is true, DevSpace will not use the terminal"
              },
              "disableReplace": {
                "type": "boolean",
                "description": "Needed to turn pod replace off"
              },
              "disableScreen": {
                "type": "boolean"
              }
            },
            "type": "object",
            "description": "Terminal describes the terminal options"
          },
          "Toleration": {
            "properties": {
              "Key": {
                "type": "string"
              },
              "Operator": {
                "type": "string"
              },
              "Value": {
                "type": "string"
              },
              "Effect": {
                "type": "string"
              },
              "TolerationSeconds": {
                "type": "integer"
              }
            },
            "type": "object",
            "required": [
              "Key",
              "Operator",
              "Value",
              "Effect",
              "TolerationSeconds"
            ]
          },
          "Variable": {
            "properties": {
              "name": {
                "type": "string"
              },
              "question": {
                "type": "string"
              },
              "options": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "password": {
                "type": "boolean"
              },
              "validationPattern": {
                "type": "string"
              },
              "validationMessage": {
                "type": "string"
              },
              "noCache": {
                "type": "boolean"
              },
              "alwaysResolve": {
                "type": "boolean"
              },
              "value": {
                "description": "Value is a shortcut for using source: none and default: my-value"
              },
              "default": {
                "description": "Default is the default value the variable should have if not set by the user"
              },
              "source": {
                "type": "string",
                "description": "Source defines where the variable should be taken from"
              },
              "command": {
                "type": "string",
                "description": "Command is the command how to retrieve the variable. If args is omitted, command is parsed as a shell\ncommand."
              },
              "args": {
                "items": {
                  "type": "string"
                },
                "type": "array",
                "description": "Args are optional args that will be used for the command"
              },
              "commands": {
                "items": {
                  "$ref": "#/definitions/Config/$defs/VariableCommand"
                },
                "type": "array",
                "description": "Commands are additional commands that can be used to run a different command on a different operating\nsystem."
              }
            },
            "type": "object",
            "required": [
              "name"
            ],
            "description": "Variable describes the var definition"
          },
          "VariableCommand": {
            "properties": {
              "command": {
                "type": "string"
              },
              "args": {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              "os": {
                "type": "string"
              }
            },
            "type": "object"
          }
        },
        "properties": {
          "version": {
            "type": "string",
            "description": "Version holds the config version"
          },
          "name": {
            "type": "string",
            "description": "Name specifies the name of the DevSpace project"
          },
          "pipelines": {
            "patternProperties": {
              ".*": {
                "$ref": "#/definitions/Config/$defs/Pipeline"
              }
            },
            "type": "object",
            "description": "Pipelines are the pipelines to execute"
          },
          "imports": {
            "items": {
              "$ref": "#/definitions/Config/$defs/Import"
            },
            "type": "array",
            "description": "Imports merges specified config files into this one"
          },
          "functions": {
            "patternProperties": {
              ".*": {
                "type": "string"
              }
            },
            "type": "object",
            "description": "Functions are bash functions that can be used within pipelines"
          },
          "require": {
            "$ref": "#/definitions/Config/$defs/RequireConfig",
            "description": "Require defines what DevSpace, plugins and command versions are needed to use this config"
          },
          "vars": {
            "patternProperties": {
              ".*": {
                "$ref": "#/definitions/Config/$defs/Variable"
              }
            },
            "type": "object",
            "description": "Vars are config variables that can be used inside other config sections to replace certain values dynamically"
          },
          "pullSecrets": {
            "patternProperties": {
              ".*": {
                "$ref": "#/definitions/Config/$defs/PullSecretConfig"
              }
            },
            "type": "object",
            "description": "PullSecrets are image pull secrets that will be created by devspace in the target namespace\nduring devspace dev or devspace deploy"
          },
          "images": {
            "patternProperties": {
              ".*": {
                "$ref": "#/definitions/Config/$defs/Image"
              }
            },
            "type": "object",
            "description": "Images holds configuration of how devspace should build images"
          },
          "deployments": {
            "patternProperties": {
              ".*": {
                "$ref": "#/definitions/Config/$defs/DeploymentConfig"
              }
            },
            "type": "object",
            "description": "Deployments is an ordered list of deployments to deploy via helm, kustomize or kubectl."
          },
          "dev": {
            "patternProperties": {
              ".*": {
                "$ref": "#/definitions/Config/$defs/DevPod"
              }
            },
            "type": "object",
            "description": "Dev holds development configuration for the 'devspace dev' command."
          },
          "commands": {
            "patternProperties": {
              ".*": {
                "$ref": "#/definitions/Config/$defs/CommandConfig"
              }
            },
            "type": "object",
            "description": "Commands are custom commands that can be executed via 'devspace run COMMAND'"
          },
          "hooks": {
            "items": {
              "$ref": "#/definitions/Config/$defs/HookConfig"
            },
            "type": "array",
            "description": "Hooks are actions that are executed at certain points within the pipeline. Hooks are ordered and are executed\nin the order they are specified."
          },
          "profiles": {
            "items": {
              "$ref": "#/definitions/Config/$defs/ProfileConfig"
            },
            "type": "array",
            "description": "Profiles can be used to change the current configuration and change the behavior of devspace"
          },
          "dependencies": {
            "patternProperties": {
              ".*": {
                "$ref": "#/definitions/Config/$defs/DependencyConfig"
              }
            },
            "type": "object",
            "description": "Dependencies are sub devspace projects that lie in a local folder or can be accessed via git"
          }
        },
        "type": "object",
        "required": [
          "version",
          "name"
        ],
        "description": "Config defines the configuration"
      }
	}
}
